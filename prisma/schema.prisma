generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Auth {
  id       String @id @default(uuid())
  email    String @unique
  password String
  user     User?
}

model Flow {
  id             String          @id @default(uuid())
  lastCompleted  Int             @default(0)
  flowComponents FlowComponent[]
  user           User?
}

model Component {
  id             String          @id @default(uuid())
  type           String
  level          Int
  content        String?
  flowComponents FlowComponent[]
}

model FlowComponent {
  id          String    @id @default(uuid())
  flowId      String
  componentId String
  order       Int
  flow        Flow      @relation(fields: [flowId], references: [id])
  component   Component @relation(fields: [componentId], references: [id])

  @@unique([flowId, componentId, order])
}

model User {
  id                 String              @id
  firstName          String
  lastName           String
  occupation         String
  major              String
  nativeLanguage     String
  flowId             String?             @unique
  createdAt          DateTime            @default(now())
  auth               Auth?               @relation(fields: [id], references: [id])
  flow               Flow?               @relation(fields: [flowId], references: [id])
  userInterests      Interest[]          @relation("UserInterests")
  userTopics         Topic[]             @relation("UserTopics")
  reports            Report[]
  userWords          Word[]              @relation("UserWords")
  userNotes          Note[]
  userStatus         UserStatus?
  writingSubmissions WritingSubmission[]
}

model Interest {
  id            String @id @default(uuid())
  name          String
  userInterests User[] @relation("UserInterests")
}

model Topic {
  id                 String              @id @default(uuid())
  field              String
  topicName          String
  level              Int
  userTopics         User[]              @relation("UserTopics")
  reports            Report[]
  writingSubmissions WritingSubmission[]

  @@unique([field, topicName])
}

model Report {
  id       String    @id @default(uuid())
  topicId  String
  userId   String
  date     DateTime  @default(now())
  type     String
  userText String
  comments Comment[]
  topic    Topic     @relation(fields: [topicId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
}

model Comment {
  id         String   @id @default(uuid())
  reportId   String
  startIndex Int
  endIndex   Int
  wrongText  String
  rightText  String
  info       String
  date       DateTime @default(now())
  report     Report   @relation(fields: [reportId], references: [id])
}

model Word {
  id        String   @id @default(uuid())
  word      String
  meaning   String
  example   String
  date      DateTime @default(now())
  userWords User[]   @relation("UserWords")
}

model Note {
  id      String   @id @default(uuid())
  userId  String
  heading String
  content String
  date    DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])
}

model WritingSubmission {
  id               String   @id @default(uuid())
  questionText     String
  writtenTextHtml  String // To store HTML from Tiptap
  writtenTextPlain String? // Optional: for plain text version
  durationSeconds  Int
  practiceDate     DateTime
  wordCount        Int?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  topicId String?
  topic   Topic?  @relation(fields: [topicId], references: [id])

  taskId String? // Optional: generic task identifier

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserStatus {
  id        String   @id @default(uuid())
  userId    String   @unique
  speaking  Int      @default(0)
  writing   Int      @default(0)
  listening Int      @default(0)
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
